#include "ros/ros.h"
#include "demo_test/pos_data.h"
#include <string.h>
#include <boost/thread.hpp>
#include <fcntl.h>
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <termios.h>
#include <stdlib.h>
#include"checksum.h"


#define BAUDRATE B57600
#define MODEMDEVICE "/dev/ttyUSB0"

typedef unsigned short uint16_t;
typedef unsigned char uint8_t;

  float ref_data[4];
boost::mutex ref_data_mutex;
demo_test::pos_data xyz;
boost::mutex pos_mutex;
float send_HZ=3;
int open_port(const char * tty_port)
{
    int fd;
    fd = open(tty_port, O_RDWR | O_NOCTTY);
    if (fd == -1)
    {
        printf("open tty error\n");
        return (-1);
    }
    else
    {
        printf("open %s successfully\n", tty_port);
    }
    if (!isatty(fd))
    {
        printf("%s is not a serial port\n", tty_port);
        return (-1);
    }
    return (fd);
}

int setup_port(int fd)
{
    struct termios config;
    if (tcgetattr(fd, &config) < 0)
    {
        printf("get serial pot attribute error\n");
        return (-1);
    }
	config.c_iflag &= ~(IGNBRK | BRKINT | ICRNL | INLCR | PARMRK | INPCK | ISTRIP | IXON);
	config.c_oflag &= ~(OCRNL | ONLCR | ONLRET | ONOCR | OFILL | OPOST);
#ifdef OLCUC
  config.c_oflag &= ~OLCUC;
#endif
#ifdef ONOEOT
  config.c_oflag &= ~ONOEOT;
#endif
  config.c_lflag &= ~(ECHO | ECHONL | ICANON | IEXTEN | ISIG);
  config.c_cflag &= ~(CSIZE | PARENB);
  config.c_cflag |= CS8;
  config.c_cc[VMIN] = 0;
  config.c_cc[VTIME] = 0; 
   if (cfsetispeed(&config, BAUDRATE) < 0 || cfsetospeed(&config, BAUDRATE) < 0)
    {
		printf("\nERROR: Could not set desired baud rate of %d Baud\n", BAUDRATE);
		return (-1);
    }
   if (tcsetattr(fd, TCSAFLUSH, &config) < 0)
    {
		fprintf(stderr, "\nERROR: could not set configuration of fd %d\n", fd);
		return (-1);
    }
    return 1;
}


void udpcallback(const demo_test::pos_data& pos)
{
    /*
    unsigned int num = pos.num;
    ROS_INFO("num is: %d", num);
    for(int i=0; i<num; i++)
    {
        ROS_INFO("rigidbody_%d: x=%f, y=%f, z=%f", i+1, pos.pos[i*3], pos.pos[i*3+1], pos.pos[i*3+2]);
    }
    */
    //lock mutex
    boost::mutex::scoped_lock lock(pos_mutex);
    memcpy(&xyz, &pos, sizeof(pos));
    //ROS_INFO_STREAM("callback: thread_id="<<boost::this_thread::get_id());
}
char* package(float *data)
{
	demo_test::pos_data temp_xyz;
//package

 		boost::mutex::scoped_lock lock(pos_mutex);
        		memcpy(&temp_xyz, &xyz, sizeof(xyz));
        	lock.unlock();
	
    		
    	char buffer[36]={0xFE,0x1C,0x00,0x01,0x32,0xE7};   //..,长度,计数（包的序数），系统号，组件号，msg_ID
	unsigned int seq=1;
	typedef struct _xyz_data
	{
		float x;
		float y;
		float z;
		float x_d;
		float y_d;
		float z_d;
		float yaw_d;
	}xyz_data;
	xyz_data _data;
	_data.x = temp_xyz.pos[0];
	_data.y = temp_xyz.pos[1];
	_data.z = temp_xyz.pos[2];
	_data.x_d = data[0];
	_data.y_d = data[1];
	_data.z_d = data[2];
	_data.yaw_d = data[3];

    memcpy(buffer+6, &_data, 28);
	buffer[2]=seq;		
	buffer[34]=0x8C;
	uint16_t crcTmp = crc_calculate((uint8_t *)(buffer+1),34);
	uint8_t ck[2];
	ck[0] = (uint8_t)(crcTmp & 0xFF);
	ck[1] = (uint8_t)(crcTmp >> 8);
	buffer[34]=ck[0];
	buffer[35]=ck[1];
	ROS_INFO("Package finished !\n");
	return buffer;
//
}
// to be complete------------------
int send(char *buffer, int fd, float send_Hz)
{
demo_test::pos_data temp_xyz;

    //to be complete
    while(1){
            
	buffer[2]=buffer[2]+1;
    int write_n = 0;
	write_n=write(fd,buffer,36);
	if(write_n!=36)
	{
		ROS_INFO("send error\n");
		return -1;
	}
	else{
			ROS_INFO("sending temp_xyz---uav1: ");
   		 ROS_INFO("sending trajectory data---uav1:");

		}
	usleep(1000000/send_Hz);
}
}



int main(int argc, char **argv)
{
    if(argc<5)
    {
        printf("missing arguments\n");
        return -1;
    }

    // setup_port
	int fd;
	fd = open_port(MODEMDEVICE);
	if(fd < 0)
	{
		return -1;
	}
	if (setup_port(fd) < 0)
	{
		return -1;
	}
	printf("%s is open...\n", MODEMDEVICE);

    //ros init
    ros::init(argc, argv, "demo_client");
    ros::NodeHandle n;
    ros::Subscriber sub = n.subscribe("demo_udp", 1000, udpcallback);
    
    //read trajectory data from file argv[1]
    ROS_INFO("argv[0]:%s",argv[0]);
    ROS_INFO("argv[1]:%s",argv[1]);
    ROS_INFO("argv[2]:%s",argv[2]);
    ROS_INFO("argv[3]:%s",argv[3]);
    ROS_INFO("argv[4]:%s",argv[4]);
   		boost::mutex::scoped_lock lock1(ref_data_mutex);
        		    ref_data[0] = atof(argv[1]);
    	ref_data[1] = atof(argv[2]);
    	ref_data[2] = atof(argv[3]);
    	ref_data[3] = atof(argv[4]);

        	lock1.unlock();

    //motion capture postion data
    //demo_test::pos_data temp_xyz;

    int i = 0;
	char* buffer;
	//boost::thread msg_package(boost::bind(&package,ref_data));
	buffer=package(ref_data);


    ros::AsyncSpinner s(1);
    s.start();
	boost::thread msg_send(boost::bind(&send,buffer,fd,send_HZ));
	
    ros::Rate loop_rate(1);

    while(ros::ok())
    {
        //ROS_INFO_STREAM("main: thread_id="<<boost::this_thread::get_id());

        //lock mutex

        //if(temp_xyz.num>0)
        //{
            ROS_INFO("sending data to  uav wirelessly");//, ++i, temp_xyz.num);
            //send(temp_xyz, ref_data, fd);
        //}
        loop_rate.sleep();
    }
	//thrd1.close();
//	thrd1.join();

	pthread_exit(msg_send);
    return 0;
}

